/*
    Copyright 2023 Ivan Kniazkov

    Use of this source code is governed by an MIT-style license
    that can be found in the LICENSE.txt file or at https://opensource.org/licenses/MIT.
*/

#pragma once

#include <string>

namespace goat {

    /**
     * @brief All possible token types
     */
    enum class token_type {
        unknown = 0,
        identifier,
        string,
        opening_bracket,
        closing_bracket,
        semicolon
    };

    /**
     * @brief A token, that is, a structure that is generated by the scanner
     *   and defines some piece of source code
     */
    struct token {
        /**
         * @brief Virtual destructor for inheritors
         */
        virtual ~token() {
        }

        /**
         * @brief The type of the token
         */
        token_type type;

        /**
         * @brief Source code file name
         */
        const char * file_name;

        /**
         * @brief Line number (starts from 1)
         */
        unsigned int line;

        /**
         * @brief Column number (starts from 1)
         */
        unsigned int column;

        /**
         * @brief Pointer to token source code
         */
        const char * code;

        /**
         * @brief Token length (in characters), always non-zero
         */
        unsigned int length;

        void set(token &base) {
            file_name = base.file_name;
            line = base.line;
            column = base.column;
            code = base.code;
            length = 0;
        }
    };

    /**
     * @brief Token representing a bracket
     */
    struct token_bracket : public token {
        /**
         * @brief Constructor
         * @param base Base token
         * @param type Type of token
         * @param paired_bracket Paired bracket to this bracket
         */
        token_bracket(token &base, token_type type, char paired_bracket) {
            set(base);
            this->type = type;
            this->length = 1;
            this->bracket = *code;
            this->paired_bracket = paired_bracket;
        }

        /**
         * @brief This bracket
         */
        char bracket;

        /**
         * @brief Paired bracket to this bracket (to check that the brackets are correct)
         */
        char paired_bracket;
    };

    /**
     * @brief Token representing string in quotes
     */
    struct token_string : public token {
        /**
         * @brief Constructor
         * @param base Base token
         */
        token_string(token &base) {
            set(base);
            type = token_type::string;
            length = 2; // token size - minimum 2 characters (2 quotes) 
        }

        /**
         * @brief String data
         */
        std::wstring data;
    };
};
