/**
 * @file options.h
 * @copyright 2025 Ivan Kniazkov
 * @brief Definitions and function prototypes for command-line options parsing.
 *
 * This file provides the structures and functions necessary to parse command-line options
 * provided by the user. It defines the structure for holding parsed options and provides
 * functionality for reading, validating, and storing those options.
 */

#pragma once

#include <stdbool.h>

#include "lib/vector.h"

/**
 * @struct options_t
 * @brief Structure for storing parsed command-line options.
 * 
 * This structure holds the options provided by the user through
 * the command line, including the input file, language selection,
 * output preferences, and arguments to be passed to the executed script.
 */
typedef struct {
    /**
     * @brief Path to the input file.
     * 
     * Specifies the file that contains the input data to be processed.
     */
    const char *input_file;

    /**
     * @brief Language for the command-line interface (CLI) error messages.
     * 
     * This option specifies the language in which errors and messages
     * should be displayed in the command-line interface.
     */
    const char *language;

    /**
     * @brief Flag to enable printing of the generated Goat source code.
     * 
     * If set to `true`, the program will output the re-generated Goat source code
     * after parsing input files to the Goat syntax tree and optimizing it.
     */
    bool print_source_code;

    /**
     * @brief Flag to enable printing of the generated bytecode.
     * 
     * If set to `true`, the program will output the generated bytecode
     * representation after processing the input file.
     */
    bool print_bytecode;

    /**
     * @brief Path to the output file for graph visualization (DOT/GraphViz).
     * 
     * If non-NULL, specifies the file where the program should save
     * the generated graph representation.
     * If NULL, graph visualization is disabled.
     */
    const char *graph_output_file;

    /**
     * @brief Arguments to be passed to the script.
     * 
     * This dynamic array stores all arguments that follow the input file
     * in the command-line input. These arguments will be provided to the script
     * when it is executed.
     */
    vector_t *script_args;
} options_t;

/**
 * @brief Creates and initializes an options_t structure.
 * 
 * This function allocates memory for an `options_t` structure and initializes its fields
 * to default values. The structure must be freed using `destroy_options()`.
 * 
 * @return A pointer to the allocated and initialized `options_t` structure.
 */
options_t *create_options();

/**
 * @brief Parses command-line arguments into an options_t structure.
 * 
 * This function processes command-line arguments and fills an `options_t` structure
 * with the corresponding values. It correctly handles options with and without parameters,
 * as well as positional arguments.
 * 
 * If parsing fails (due to missing values, unknown options, or other errors),
 * the function returns `NULL`.
 * 
 * @param argc The number of command-line arguments.
 * @param argv The array of command-line arguments.
 * @return A pointer to an `options_t` structure if parsing is successful, otherwise `NULL`.
 */
options_t *parse_options(int argc, char **argv);

/**
 * @brief Destroys an options_t structure and frees all associated memory.
 * @param opt A pointer to the `options_t` structure to be destroyed.
 */
void destroy_options(options_t *opt);
