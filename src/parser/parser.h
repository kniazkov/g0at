/**
 * @file parser.h
 * @copyright 2025 Ivan Kniazkov
 * @brief Defines structures and function prototypes for the parser.
 *
 * This file contains the definition of structures and function prototypes for the parser,
 * which transforms a stream of tokens generated by the scanner into an abstract syntax tree (AST).
 * The parser validates the syntactic correctness of the input and prepares data
 * for further analysis, transformation, or bytecode generation.
 */

#pragma once

#include "scanner/scanner.h"
#include "compilation_error.h"

/**
 * @typedef reduce_rule_t
 * @brief Function pointer type for token reduction rules in a bottom-up parser.
 * 
 * A reduction rule is a function that performs a reduction operation in a bottom-up parser. 
 * It processes tokens starting from a given token and may create new tokens and syntax tree 
 * nodes during the reduction process.
 * 
 * The function does not return a value, but it modifies the provided token list and allocates
 * memory for new tokens and syntax tree nodes using the specified arenas.
 * 
 * @param start_token The token where the reduction starts.
 * @param tokens_memory The memory arena for allocating new tokens during the reduction.
 * @param graph_memory The memory arena for allocating syntax tree nodes during the reduction.
 */
typedef void (*reduce_rule_t)(token_t *start_token, arena_t *tokens_memory, arena_t *graph_memory);


/**
 * @brief Processes tokens and analyzes bracket pairs, storing the result in the provided
 *  token list.
 * 
 * This function creates a list of tokens and processes them using `scan_and_analyze_for_brackets`, 
 * transforming balanced bracket pairs into special `TOKEN_BRACKET_PAIR` tokens. The resulting
 * tokens are stored in the lists pointed to by `tokens`. If any errors are encountered
 * during the scanning process, they are returned.
 * 
 * @param arena The memory arena for allocating tokens.
 * @param scan The scanner used to get the tokens.
 * @param tokens A pointer to token list where the processed tokens will be stored.
 * 
 * @return A `compilation_error_t` pointer if an error is detected (e.g., mismatched brackets),
 *  or NULL if no errors.
 */
compilation_error_t *process_brackets(arena_t *arena, scanner_t *scan, token_list_t *tokens);

/**
 * @brief Collapses a sequence of tokens into a single token.
 * 
 * This function takes a sequence of tokens, specified by the `first` and `last` tokens, and merges
 * them into a single token of the specified type. The new token will span the range of positions
 * from the `begin` position of the `first` token to the `end` position of the `last` token.
 * The function also associates the new token with the provided abstract syntax tree node (`node`).
 * 
 * After collapsing the tokens, the old tokens are removed from the token list, and the new token
 * is inserted in their place, maintaining the linkage of surrounding tokens.
 * 
 * @param tokens_memory The memory arena to allocate the new token.
 * @param first The first token in the sequence to collapse.
 * @param last The last token in the sequence to collapse.
 * @param type The type of the new token.
 * @param node The AST node associated with the new token.
 * @return A pointer to the newly created token that represents the collapsed sequence.
 * 
 * @note The `first` and `last` tokens must belong to the same sequence and will be removed 
 *  from the token list during the collapse process. The new token will replace the sequence
 *  of tokens in the list.
 */
token_t *collapse_tokens_to_token(arena_t *tokens_memory, token_t *first, token_t *last,
        token_type_t type, node_t *node);

/**
 * @brief Applies reduction rules to a sequence of token groups.
 * 
 * This function processes a set of token groups and applies the appropriate reduction rules.
 * Each token group is passed through a series of reduction rules.
 * 
 * The function iterates over token groups and applies each reduction rule to transform the 
 * token sequence into more abstract representations, ultimately building the abstract 
 * syntax tree (AST).
 * 
 * @param groups The token groups to which the reduction rules will be applied.
 * @param tokens_memory The memory arena used for allocating new tokens during reductions.
 * @param graph_memory The memory arena used for allocating new syntax tree nodes during reductions.
 */
void apply_reduction_rules(token_groups_t *groups, arena_t *tokens_memory, arena_t *graph_memory);
