/**
 * @file parser.h
 * @copyright 2025 Ivan Kniazkov
 * @brief Defines structures and function prototypes for the parser.
 *
 * This file contains the definition of structures and function prototypes for the parser,
 * which transforms a stream of tokens generated by the scanner into an abstract syntax tree (AST).
 * The parser validates the syntactic correctness of the input and prepares data
 * for further analysis, transformation, or bytecode generation.
 */

#pragma once

#include "compilation_error.h"

/**
 * @struct arena_t
 * @brief Forward declaration for memory arena structure.
 */
typedef struct arena_t arena_t;

/**
 * @struct arena_t
 * @brief Forward declaration for scanner.
 */
typedef struct scanner_t scanner_t;

/**
 * @struct arena_t
 * @brief Forward declaration for token structure.
 */
typedef struct token_t token_t;

/**
 * @struct arena_t
 * @brief Forward declaration for list of tokens.
 */
typedef struct token_list_t token_list_t;

/**
 * @typedef reduce_rule_t
 * @brief Function pointer type for token reduction rules in a bottom-up parser.
 * 
 * A reduction rule is a function that performs a reduction operation in a bottom-up parser. 
 * It processes tokens starting from a given token and may create new tokens and syntax tree 
 * nodes during the reduction process.
 * 
 * The function does not return a value, but it modifies the provided token list and allocates
 * memory for new tokens and syntax tree nodes using the specified arenas.
 * 
 * @param start_token The token where the reduction starts.
 * @param tokens_memory The memory arena for allocating new tokens during the reduction.
 * @param graph_memory The memory arena for allocating syntax tree nodes during the reduction.
 */
typedef void (*reduce_rule_t)(token_t *start_token, arena_t *tokens_memory, arena_t *graph_memory);


/**
 * @brief Processes tokens and analyzes bracket pairs, storing the result in the provided
 *  token list.
 * 
 * This function creates a list of tokens and processes them using `scan_and_analyze_for_brackets`, 
 * transforming balanced bracket pairs into special `TOKEN_BRACKET_PAIR` tokens. The resulting
 * tokens are stored in the lists pointed to by `tokens`. If any errors are encountered
 * during the scanning process, they are returned.
 * 
 * @param arena The memory arena for allocating tokens.
 * @param scan The scanner used to get the tokens.
 * @param tokens A pointer to token list where the processed tokens will be stored.
 * 
 * @return A `compilation_error_t` pointer if an error is detected (e.g., mismatched brackets),
 *  or NULL if no errors.
 */
compilation_error_t *process_brackets(arena_t *arena, scanner_t *scan, token_list_t *tokens);

